@startuml

/' diagram meta data start
config=StructureConfiguration;
{
  "projectClassification": {
    "searchMode": "OpenProject", // OpenProject, AllProjects
    "includedProjects": "",
    "pathEndKeywords": "*.impl",
    "isClientPath": "",
    "isClientName": "",
    "isTestPath": "",
    "isTestName": "",
    "isMappingPath": "",
    "isMappingName": "",
    "isDataAccessPath": "",
    "isDataAccessName": "",
    "isDataStructurePath": "",
    "isDataStructureName": "",
    "isInterfaceStructuresPath": "",
    "isInterfaceStructuresName": "",
    "isEntryPointPath": "",
    "isEntryPointName": "",
    "treatFinalFieldsAsMandatory": false
  },
  "graphRestriction": {
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
    "removeByAnnotation": "",
    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
    "removeByClassName": "",
    "cutMappings": false,
    "cutEnum": true,
    "cutTests": true,
    "cutClient": true,
    "cutDataAccess": false,
    "cutInterfaceStructures": false,
    "cutDataStructures": false,
    "cutGetterAndSetter": true,
    "cutConstructors": true
  },
  "graphTraversal": {
    "forwardDepth": 6,
    "backwardDepth": 6,
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "hideMappings": false,
    "hideDataStructures": false,
    "hidePrivateMethods": true,
    "hideInterfaceCalls": true, // indirection: implementation -> interface (is hidden) -> implementation
    "onlyShowApplicationEntryPoints": false, // root node is included
    "useMethodCallsForStructureDiagram": "ForwardOnly" // ForwardOnly, BothDirections, No
  },
  "details": {
    "aggregation": "GroupByClass", // ByClass, GroupByClass, None
    "showClassGenericTypes": true,
    "showMethods": true,
    "showMethodParameterNames": true,
    "showMethodParameterTypes": true,
    "showMethodReturnType": true,
    "showPackageLevels": 2,
    "showDetailedClassStructure": true
  },
  "rootClass": "APSDemo",
  "extensionCallbackMethod": "" // qualified.class.name#methodName - signature: public static String method(String)
}
diagram meta data end '/



digraph g {
    rankdir="TB"
    splines=polyline


'nodes
subgraph cluster_65028 {
   	label=APS
	labeljust=l
	fillcolor="#ececec"
	style=filled

   Machine1858361680[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Machine</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   _approx_run_time: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   _orders: LinkedHashSet&lt;Order&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >+   machine_id: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   name: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   products_pace_per_hour: HashMap&lt;Integer, Integer&gt; [0..*]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ aboveCapacity(hours_allowed: int, upper_percentage: double): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ addOrder(order: Order)</TD></TR>
<TR><TD ALIGN="LEFT" >+ belowCapacity(hours_allowed: int, lower_percentage: double): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ checkViableOrder(order: Order): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ clone(): Machine</TD></TR>
<TR><TD ALIGN="LEFT" >+ removeOrder(order: Order)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Order1858361680[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Order</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   _name: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   _order_id: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   _production_type_id: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   _quantity: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   delivery_time: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   earliest_start_time: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   end_time: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   latest_due_time: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   machine: Machine [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   start_time: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   status: String [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ clone(): Order</TD></TR>
<TR><TD ALIGN="LEFT" >+ setStartEndTime(start_time: int, end_time: int): int</TD></TR>
<TR><TD ALIGN="LEFT" >- statusCheck(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ updateStatus()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Scheduler1858361680[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Scheduler</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   _machines: ArrayList&lt;Machine&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   _max_capacity_per_machine: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   _max_hours_allowed: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   _min_capacity_per_machine: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   _min_makespan: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   _num_machines: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   _num_orders: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   _num_production_types: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   _order_type_switch_times: ArrayList&lt;ArrayList&lt;Double&gt;&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   _orders: ArrayList&lt;Order&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   _schedules: ArrayList&lt;ArrayList&lt;Machine&gt;&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   _sorted_machines: SortedMap&lt;Grade, ArrayList&lt;Machine&gt;&gt; [0..*]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ calcAllPossibleSchedule(weights: Integer...): ArrayList&lt;ArrayList&lt;Stat&gt;&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >- calcMachineWorkTime(machine: Machine): Stat</TD></TR>
<TR><TD ALIGN="LEFT" >+ createChart(schedule: ArrayList&lt;Machine&gt;): GanttChart&lt;Number, String&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ createChart(index: int): GanttChart&lt;Number, String&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >- deepCopy(machines: ArrayList&lt;Machine&gt;): ArrayList&lt;Machine&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >- depthFirstSearch(order_index: int, machines: ArrayList&lt;Machine&gt;)</TD></TR>
<TR><TD ALIGN="LEFT" >+ generateAllPossible()</TD></TR>
<TR><TD ALIGN="LEFT" >+ getBestSchedule(num: int): Map&lt;Grade, ArrayList&lt;Machine&gt;&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >- getGrade(stats: ArrayList&lt;Stat&gt;): Grade</TD></TR>
<TR><TD ALIGN="LEFT" >+ init(num_order_types: int, num_machines: int, num_orders: int, max_hours_allowed: int, max_capacity_per_machine: double, min_capacity_per_machine: double)</TD></TR>
<TR><TD ALIGN="LEFT" >+ initRandom(num_order_types: int, num_machines: int, num_orders: int, max_hours_allowed: int, max_capacity_per_machine: double, min_capacity_per_machine: double, seed: Integer...)</TD></TR>
<TR><TD ALIGN="LEFT" >+ printSchedules()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

subgraph cluster_1787760956 {
   	label=Order
	labeljust=l
	fillcolor="#d8d8d8"
	style=filled

   OrderStatus1958569584[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)OrderStatus</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" ># chooseColor(status: String): String</TD></TR>
<TR><TD ALIGN="LEFT" >- chooseColor(code: int): String</TD></TR>
<TR><TD ALIGN="LEFT" >- code2Status(code: int): String</TD></TR>
<TR><TD ALIGN="LEFT" >- status2Code(status: String): int</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
}

subgraph cluster_1879147215 {
   	label=Scheduler
	labeljust=l
	fillcolor="#d8d8d8"
	style=filled

   Grade2142191325[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Grade</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+   est_percentage: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   grade_: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   ldt_percentage: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   makespan_percentage: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   on_time_percentage: double [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" ># calcGradeByWeights(on_time_weight: int, makespan_weight: int, est_weight: int, ldt_weight: int)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
}
}

subgraph cluster_72692217 {
   	label=APSDemo
	labeljust=l
	fillcolor="#ececec"
	style=filled

   APSDemo72692217[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)APSDemo</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ main(args: String[])</TD></TR>
<TR><TD ALIGN="LEFT" >- showWeightInputWindow(stage: Stage, onWeightsSubmitted: Consumer&lt;int[]&gt;)</TD></TR>
<TR><TD ALIGN="LEFT" >+ start(stage: Stage)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
}

'edges
Machine1858361680 -> Order1858361680[label="_orders
[0..*]"];
Order1858361680 -> Machine1858361680[label="machine
[0..1]"];
Scheduler1858361680 -> Grade2142191325[label="_sorted_machines
[0..*]"];
Scheduler1858361680 -> Machine1858361680[label="_machines
[0..*]"];
Scheduler1858361680 -> Machine1858361680[label="_schedules
[0..*]"];
Scheduler1858361680 -> Machine1858361680[label="_sorted_machines
[0..*]"];
Scheduler1858361680 -> Order1858361680[label="_orders
[0..*]"];
Scheduler1858361680 -> OrderStatus1958569584[label="createChart() -> chooseColor()"];

}
@enduml